// tls 통신이란 암호화된 데이터를 전송하기위해 공개키와 대칭키를 혼합해서 사용하는 통신으로, 틍신 과정은 아래와 같다.
// 1. 악수 (handshake)
//   1.1 클라이언트가 서버에 접속 (Client Hello 단계)
// 		- 클라이언트 측에서 랜덤 데이터를 생성한다.
//		- 그리고 클라이언트가 지원하는 암호화 방식들을 전송한다.
//		- 참고로 이전에 핸드 쉐이크 과정을 이미 수행했다면, 세션 아이디를 함께 전송해 과정을 생략함으로써 시간을 절약할 수 있다.
//   1.2 클라이언트에 대한 서버의 응답 (Server Hello 단계)
//		- 서버 측에서 랜덤데이터를 생성한다.
//		- 클라이언트의 암호화 방식 중 한가지를 선택하고 인증서와 함께 전송한다.
//		- 또한 임의로 세션 아이디 하나를 생성해서 함께 반환한다.
//   1.3 이 단계에서는 인증서가 CA에 의해서 발급된 것인지 확인한다.
//		- 클라이언트의 내장 CA 공개키를 이용하여 인증서가 복호화 된다면 이 인증서가 CA 로부터 발급된 것이라고 믿는다.
//		- 그리고 1.1 단계와 1.2 단계에서 생성된 랜덤 데이터를 합친 후(pre master key), 인증서에 포함되어있는 공개키로 암호화하여 서버에 전송한다.
//   1.4 이 단계에서는 서버와 클라이언트의 대칭키를 생성한다.
//		- 서버는 클라이언트가 전달한 pre master key를 자신만의 비공개키로 복호화한다.
//		- 이로써 서버와 클라이언트 모두 가지고 있는 pre master key를 이용하여 대칭 키인 session key를 생성한다.
//   1.5 서버와 클라이언트는 서로에게 핸드쉐이크 단계가 종료되었다는 것을 알린다.
// 2. 세션 (session)
//   2.1 클라이언트 측에서 먼저 대칭키인 session key를 이용하여 데이터를 암호화해서 전달한다.
//	 2.2 서버 측에서도 가지고 있는 session key를 이용하여 데이터를 복호화해서 로직을 처리한다.
// 3. 세션 종료
//	 3.1 데이터 전송이 끝나면 tls 통신이 끝났음을 서로에게 알리고 대칭키를 폐기한다.

package main

import (
	"fmt"
	"log"
	"net/http"
)

func main() {
	http.HandleFunc("/", func(rw http.ResponseWriter, r *http.Request) {
		rw.Header().Set("Content-Type", "text/plain")
		_, _ = fmt.Fprint(rw, "Hello, HTTPS!!")
	})

	log.Fatal(http.ListenAndServeTLS(":8080", "../key/instance_cert.pem", "../key/instance_key.pem", nil))
}